# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_1.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from config import BANKNOTE_TYPES, MAX_CARTRIDGES
from models import Cartridge, CartridgeInfoGen, Status


class Ui_MainWindow(object):

    def __init__(self, MainWindow):
        self.MainWindow = MainWindow
        self.num_money_temp = 0
        self.banknote_types = sorted(BANKNOTE_TYPES)
        self.cartridges_type_objs_dict = {}
        self.cartridges = []
        for banknote_type in self.banknote_types:
            self.cartridges_type_objs_dict[int(banknote_type)] = []
        self.start_banknote_type_index = -1

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(500, 500)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.num_cartridges = QtWidgets.QSpinBox(self.centralwidget)
        self.num_cartridges.setGeometry(QtCore.QRect(30, 20, 121, 22))
        self.num_cartridges.setMaximum(8)
        self.num_cartridges.setObjectName("num_cartridges")

        self.btn_calc_result = QtWidgets.QPushButton(self.centralwidget)
        self.btn_calc_result.setGeometry(QtCore.QRect(300, 130, 131, 61))
        self.btn_calc_result.setObjectName("btn_calc_result")

        self.btn_randomise = QtWidgets.QPushButton(self.centralwidget)
        self.btn_randomise.setGeometry(QtCore.QRect(300, 230, 131, 61))
        self.btn_randomise.setObjectName("btn_randomise")

        self.num_money = QtWidgets.QSpinBox(self.centralwidget)
        self.num_money.setGeometry(QtCore.QRect(330, 20, 141, 19))
        self.num_money.setMaximum(1000000000)
        self.num_money.setObjectName("num_money")

        self.splitter = QtWidgets.QSplitter(self.centralwidget)
        self.splitter.setGeometry(QtCore.QRect(30, 60, 341, 19))
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setObjectName("splitter")
        self.label_n_0 = QtWidgets.QLabel(self.splitter)
        self.label_n_0.setObjectName("label_n_0")
        self.box_banknote_type_0 = QtWidgets.QComboBox(self.splitter)
        self.box_banknote_type_0.setEditable(False)
        self.box_banknote_type_0.setObjectName("box_banknote_type_0")
        self.box_banknote_type_0.addItem("")
        self.box_banknote_type_0.addItem("")
        self.label_remaining_quantity_0 = QtWidgets.QLabel(self.splitter)
        self.label_remaining_quantity_0.setObjectName("label_remaining_quantity_0")
        self.flag_fault_status_0 = QtWidgets.QCheckBox(self.splitter)
        self.flag_fault_status_0.setObjectName("flag_fault_status_0")
        self.splitter_1 = QtWidgets.QSplitter(self.centralwidget)
        self.splitter_1.setGeometry(QtCore.QRect(30, 90, 341, 19))
        self.splitter_1.setOrientation(QtCore.Qt.Horizontal)
        self.splitter_1.setObjectName("splitter_1")
        self.label_n_1 = QtWidgets.QLabel(self.splitter_1)
        self.label_n_1.setObjectName("label_n_1")
        self.box_banknote_type_1 = QtWidgets.QComboBox(self.splitter_1)
        self.box_banknote_type_1.setEditable(False)
        self.box_banknote_type_1.setObjectName("box_banknote_type_1")
        self.box_banknote_type_1.addItem("")
        self.box_banknote_type_1.addItem("")
        self.label_remaining_quantity_1 = QtWidgets.QLabel(self.splitter_1)
        self.label_remaining_quantity_1.setObjectName("label_remaining_quantity_1")
        self.flag_fault_status_1 = QtWidgets.QCheckBox(self.splitter_1)
        self.flag_fault_status_1.setObjectName("flag_fault_status_1")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # События
        self.num_cartridges.valueChanged.connect(self.num_cartridges_changed)
        self.num_money.valueChanged.connect(self.num_money_changed)
        self.btn_calc_result.clicked.connect(self.calc_result)
        self.btn_randomise.clicked.connect(self.randomise)

        # Дефолтная видимость
        self.splitter.hide()
        self.splitter_1.hide()

    def calc_result(self):

        stop = False
        status = Status.FAULT

        while True:
            # Начинаем с самого крупного номинала
            current_banknote_type = self.banknote_types[self.start_banknote_type_index]

            # Проверяем есть ли купюры в кассетах данного типа
            for current_cartridge in self.cartridges_type_objs_dict[current_banknote_type]:

                # Находим остаток и расходуемое кол-во купюр
                rest = self.num_money_temp % current_banknote_type
                count = self.num_money_temp // current_banknote_type

                # Если остатка нет и нам хватает купюр -> Перерасчёт и Выдача (Успех)
                if rest == 0 and count <= current_cartridge.quantity_temp:
                    current_cartridge.quantity_temp -= count
                    self.num_money_temp -= count * current_banknote_type
                    status = Status.SUCCESS
                    print(status)
                    stop = True
                    break

                # Если нам достаточно средств -> Делаем Перерасчёт
                if count <= current_cartridge.quantity_temp:
                    current_cartridge.quantity_temp -= count
                    self.num_money_temp -= count * current_banknote_type
                # Если НЕ хватает, то БЕЗ перерасчёта идём далее
                else:
                    continue

            if stop:
                break

            self.start_banknote_type_index -= 1

            # Если мы прошлись по всем кассетам, но не смогли набрать сумму -> Недостаточно средств
            if self.start_banknote_type_index == -(MAX_CARTRIDGES - 1):
                print(status)
                break

        # Если успешно, то заменяем quantity на quantity_temp
        if status == Status.SUCCESS:
            for cartridge in self.cartridges:
                cartridge.quantity = cartridge.quantity_temp
                self.num_money.setValue(self.num_money_temp)

        # Если нет, то quantity_temp приравниваем к quantity
        if status == Status.FAULT:
            for cartridge in self.cartridges:
                cartridge.quantity_temp = cartridge.quantity
                self.num_money_temp = self.num_money.value()

        # Возвращаем требуемые расчётные переменные в дефолтное состояние
        self.start_banknote_type_index = -1

        # Обновляем фронт
        self.update_front()

    def randomise(self):
        print("randomise")

        # Очищаем старые данные
        for key in self.cartridges_type_objs_dict.keys():
            self.cartridges_type_objs_dict[key] = []
        self.cartridges.clear()

        # Заполняем новыми данными
        for i in range(self.num_cartridges.value()):
            banknote_type_index = CartridgeInfoGen.gen_banknote_type_index()
            banknote_type = self.banknote_types[banknote_type_index]
            quantity = CartridgeInfoGen.gen_quantity()

            cartridge = Cartridge(
                number=i,
                banknote_type=banknote_type,
                banknote_type_index=banknote_type_index,
                quantity=quantity,
                quantity_temp=quantity,
                broken=CartridgeInfoGen.gen_broken()
            )
            self.cartridges_type_objs_dict[banknote_type].append(cartridge)
            self.cartridges.append(cartridge)

    def update_front(self):

        if self.num_cartridges.value() > 0:
            self.splitter.show()
            self.box_banknote_type_0.setCurrentIndex(self.cartridges[0].banknote_type_index)
            self.label_remaining_quantity_0.setText(str(self.cartridges[0].quantity))
            self.flag_fault_status_0.setChecked(self.cartridges[0].broken)

        else:
            self.splitter.hide()

        if self.num_cartridges.value() > 1:
            self.splitter_1.show()
            self.box_banknote_type_1.setCurrentIndex(self.cartridges[1].banknote_type_index)
            self.label_remaining_quantity_1.setText(str(self.cartridges[1].quantity))
            self.flag_fault_status_1.setChecked(self.cartridges[1].broken)

        else:
            self.splitter_1.hide()

    def num_cartridges_changed(self):
        print("num_cartridges_changed")

        self.randomise()
        self.update_front()

    def num_money_changed(self):
        self.num_money_temp = self.num_money.value()
        pass

    # Наполняем фронт
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ATM"))
        self.btn_calc_result.setText(_translate("MainWindow", "Выдать"))
        self.label_n_0.setText(_translate("MainWindow", "1"))

        # Заполнение box_banknote_type_1
        self.box_banknote_type_0.clear()
        for i, banknote_type in enumerate(self.banknote_types):
            self.box_banknote_type_0.addItem(_translate("MainWindow", str(banknote_type)))

        self.label_remaining_quantity_0.setText(_translate("MainWindow", "TextLabel"))
        self.flag_fault_status_0.setText(_translate("MainWindow", "CheckBox"))

        self.label_n_1.setText(_translate("MainWindow", "2"))

        # Заполнение box_banknote_type_2
        self.box_banknote_type_1.clear()
        for i, banknote_type in enumerate(self.banknote_types):
            self.box_banknote_type_1.addItem(_translate("MainWindow", str(banknote_type)))

        self.label_remaining_quantity_1.setText(_translate("MainWindow", "TextLabel"))
        self.flag_fault_status_1.setText(_translate("MainWindow", "CheckBox"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow(MainWindow)
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
